node:
  port: 5671

management:
  endpoint:
    health:
      enabled: true
      show-details: always
    shutdown:
      enabled: true
  endpoints:
    web:
      base-path: /
      exposure:
        include: '*'
spring:
  application:
    name: service-discovery-cluster
---
spring:
  profiles: nodena1a
eureka:
  instance:
    hostname: eureka-na-1a-region-node  #  put host name or mapped route URL
    appname: service-discovery-cluster
  client:
    serviceUrl:
      defaultZone: http://eureka-na-2a-region-node:${node.port}/eureka,http://eureka-emea-1a-region-node:${node.port}/eureka,http://eureka-emea-2a-region-node:${node.port}/eureka
    register-with-eureka: true
    fetch-registry: true
server:
  port: ${node.port}

---
spring:
  profiles: nodena2a
eureka:
  instance:
    hostname: eureka-na-2a-region-node
    appname: service-discovery-cluster
  client:
    serviceUrl:
      defaultZone: http://eureka-na-1a-region-node:${node.port}/eureka,http://eureka-emea-1a-region-node:${node.port}/eureka,http://eureka-emea-2a-region-node:${node.port}/eureka
    register-with-eureka: true
    fetch-registry: true
server:
  port: ${node.port}

---
spring:
  profiles: nodeemea1a
eureka:
  instance:
    hostname: eureka-emea-1a-region-node
    appname: service-discovery-cluster
  client:
    serviceUrl:
      defaultZone: http://eureka-na-1a-region-node:${node.port}/eureka,http://eureka-na-2a-region-node:${node.port}/eureka,http://eureka-emea-2a-region-node:${node.port}/eureka
    register-with-eureka: true
    fetch-registry: true
server:
  port: ${node.port}

---
spring:
  profiles: nodeemea2a
eureka:
  instance:
    hostname: eureka-emea-2a-region-node
    appname: service-discovery-cluster
  client:
    serviceUrl:
      defaultZone: http://eureka-na-1a-region-node:${node.port}/eureka,http://eureka-emea-1a-region-node:${node.port}/eureka,http://eureka-na-2a-region-node:${node.port}/eureka
    register-with-eureka: true
    fetch-registry: true
server:
  port: ${node.port}